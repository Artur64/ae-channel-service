version: 2.1  # use CircleCI 2.0 instead of CircleCI Classic
# https://circleci.com/docs/2.0/language-elixir/

references:
  install_libsodium: &install_libsodium
    run:
      name: Install libsodium
      environment:
        LIBSODIUM_VERSION: "1.0.16"
      # source: https://github.com/aeternity/docker-builder/blob/master/Dockerfile#L23
      command: |
        LIBSODIUM_DOWNLOAD_URL="https://github.com/jedisct1/libsodium/releases/download/${LIBSODIUM_VERSION}/libsodium-${LIBSODIUM_VERSION}.tar.gz" \
          && curl -fsSL -o libsodium-src.tar.gz "$LIBSODIUM_DOWNLOAD_URL" \
          && mkdir libsodium-src \
          && tar -zxf libsodium-src.tar.gz -C libsodium-src --strip-components=1 \
          && cd libsodium-src \
          && ./configure && make -j$(nproc) && sudo make install && sudo ldconfig \
          && cd ..
# machine_config: &machine_config
#     resource_class: large
#     machine:
#       image: ubuntu-1604:201903-01
#       docker_layer_caching: true
#     working_directory: ~/aeternity
#     environment:
#       DOCKERHUB_REPO: aeternity/aeternity

jobs:  # basic units of work in a run
  build:  # runs not using Workflows must have a `build` job as entry point
    parallelism: 1  # run only one instance of this job in parallel
    docker:  # run the steps with Docker
      - image: circleci/elixir:otp-21  # ...with this image as the primary container; this is where all `steps` will run
        environment:  # environment variables for primary container
          MIX_ENV: test
      # - image: aeternity/aeternity:latest

    working_directory: ~/app  # directory where steps will run

    steps:  # commands that comprise the `build` job
      - checkout  # check out source code to working directory
      - *install_libsodium
      # - run: sudo apt-get update
      # - run: sudo apt-get install libsodium-dev
      - setup_remote_docker
      - run: docker run -d --name aeternity_node aeternity/aeternity

      - run: mix local.hex --force  # install Hex locally (without prompt)
      - run: mix local.rebar --force  # fetch a copy of rebar (without prompt)

      - restore_cache:  # restores saved mix cache
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys:  # list of cache keys, in decreasing specificity
            - v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
            - v1-mix-cache-{{ .Branch }}
            - v1-mix-cache
      - restore_cache:  # restores saved build cache
          keys:
            - v1-build-cache-{{ .Branch }}
            - v1-build-cache
      - run: make clean deps compile  # get updated dependencies & compile them
      - save_cache:  # generate and store mix cache
          key: v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths: "deps"
      - save_cache:  # make another, less specific cache
          key: v1-mix-cache-{{ .Branch }}
          paths: "deps"
      - save_cache:  # you should really save one more cache (just in case)
          key: v1-mix-cache
          paths: "deps"
      - save_cache: # don't forget to save a *build* cache, too
          key: v1-build-cache-{{ .Branch }}
          paths: "_build"
      - save_cache: # and one more build cache for good measure
          key: v1-build-cache
          paths: "_build"

      - run: mix test  # run all tests in project

      - store_test_results:  # upload junit test results for display in Test Summary
          # Read more: https://circleci.com/docs/2.0/collect-test-data/
          path: _build/test/lib/ae_socket_connector # Replace with the name of your :app
# workflows:
#   version: 2
#   build_and_test:
#     jobs:
#       - docker_smoke_tests
#       - build:
#           requires:
#             - docker_smoke_tests